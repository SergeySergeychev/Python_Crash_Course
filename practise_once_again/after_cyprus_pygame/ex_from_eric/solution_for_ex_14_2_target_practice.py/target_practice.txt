# Ex. - NR. 14-2., page 298, "Target Practice".
    # Description:
        # Create a rectangle at the right edge of the screen that moves up
        # and down at a steady rate. Then have a ship appear on the left
        # side of the screen that the player can move up and down while
        # firing bullets at the moving , rectangular target. Add a play
        # button that starts the game, and when the player misses the
        # target three times, end the game and make the player button
        # reappear. Let the player restart the game with this Play button.
# Working Plan:

    # Create class settings:
        # A Class to store all settings for game Rectangle Invasion.
        # Initialize the game's settings.
            # Screen settings:
                # screen_height.
                # screen_width.
                # bg_color.
            # Ship settings:
                # ship_speed_factor.
            # Rectangle settings:
                # rectangle_speed_factor
                # rectangle_direction
                    # -1 represents down; 1 represents up
            # Bullet settings:
                # bullet_height.
                # bullet_width.
                # bullet_color.
                # bullet_speed_factor
                # bullets_limit

    # Create class GameStats:
        # A class to track statistic for game "Rectangle Invasion".
        # Write main function:
            # To initialize statistics.
            # function_reset_stats.
            # game_active status.
        # Write function reset_stats:
            # Initialize statistics that can change during the game.
            # bullets_left = bullets_limit.

    # Create class Ship:
        # A class to reprsent a ship.
        # Initialize  a ship and set its starting position.
            # Initialize attributes as ai_settings, screen
            # Load the ship and get its rect.
            # Get screen_rect
            # Start each new ship at the left center side of the screen
            # Store a decimal value for the ship center.
            # Movement flag down and Movement flag up.
            # Write function update:
            # Update ship's position based on the movement flags.
            # Update ships center rect position.
        # Write function center_ship:
            # Center the ship on the left side of the screen.
        # Write function blitme:
            # Draw the ship at its current location.

    # Create class Rectangle:
        # Class Rectangle inherits from class Sprite.
        # A class to represent a rectangle.
        # Initialize a rectangle and set its starting position.
            # Create a rectangle at (0, 0) and set it correct positions.
            # Store rectangle position as a decimal value
            # Store color and speed.
        # Write funciton update:
            # Update position of the rectangle move it down and up.
        # Write function check_edges:
            # Return True if rectangle is at the bottom or top edge of the scr.
        # Write draw_rectangle:
            # Draw the rectangle to the screen.

    # Create class Bullet.
        # A class to manage bullets fired from the ship.
        # Create bullet object at the ship's current position.
            # Create a bullet rect at(0, 0) and then set it position.
            # Store bullet's position as a decimal value.
            # Store bullet's color and speed_factor.
        # Write function update:
            # Move the bullet from right side to left side of the screen.
            # Update the decimal position of the bullet.
            # Update the rect position.
        # Write function draw_bullet.
            # Draw the bullet to the screen.

    # Create class Button:
        # use tool as pygame.font
        # Class to represent play button.
        # Initialize button attributes.
            # Set the dimension and properties of the button.
            # Built the buttons's rect object and center it.
            # The button message needs to be prepped only once.
        # Write function prep_msg:
            # Turn msg into a rendered image and center text on the button.
        # Write function draw_button:
            # Draw blank button and then draw message.

    # Create game_function.py
        # Import tools: sys, sleep, pygame, bullet, rectangle.
        # Write function check_keydown_events.
            # Respond to keypress.
            # K_UP, K_DOWN, K_SPACE, K_q, K_p.
            # Create a new bullet and add it to the bullets group.
            # Press P to start new game.
        # Write function fire_bullet:
            # Fire a bullet if limit not reached yet.
            # Create a new bullet and add it to the bullets group.
        # Write function check_keyup_events:
            # Respond to key releases.
            # Respond to K_UP and K_DOWN release.
        # Write function check_events:
            # Respond to keypress and mouse events.
        # Write function check_play_button:
            # Start a new game if player click on play button.
        # Write function start game:
            # Start a new game.
                # Hide the mouse cursor.
                # Reset the game statistics.
                # Empty the list of bullets.
                # Center the rectangle.
                # Center the ship.
        # Write function update_bullets:
            # Update position of bullets and get rid of old bullets.
            # Update bullets.
            # Get rid of old bullets that have been missed.
            # Check bullet and rectangle collisions.
        # Write function check_bullet_rectangle_collisions.
            # Respond to bullet-rectangle collision.
            # Remove bullet and rectangle that have collided.
            # Draw rectangle on the screen.
        # Write function check_rectangle_edges:
            # Respond appropriately if rectangle reached an edge.
        # Write function change_rectangle_direction:
            # Change the rectangle's direction.
        # Write function miss_hit:
            # Decrement ship_left
            # Center ship.
            # Center rectangle.
            # Make pause.
            # If no life's left , game_active = False and mause is visible.
        # Write function update_rectangle:
            # Check if the rectangle is at an edge of the screen.
            # Update position of the rectangle.
        # Write function update_screen:
            # Update image on the screen and flip to the new screen.
            # Redraw the screen during each pass through the loop.
            # Redraw all bullets behind ship.
            # Make ship visible.
            # Draw rectangle.
            # Draw the play button if the game is inactive.
            # Make the most recently drawn screen visible.

    # Write game "TryToHitIt":
        # Use tools as :
            # sys, pygame, game_functions.
            # import Settings, Rectangle, GameStats, Button, Ship, Group.
        # Write function run_game:
            # Initialize pygame, screen, object, settings.
            # Make a play_button.
            # Create and instance to store game statistics.
            # Make a ship, group of rectangles, group of bullets.
            # Start the main loop for the game.
                # Watch for keyboard and mouse events.
                # if game_active:
                    # Update the ship's position.
                    # Update position of bullets and get rid of old bullets.
                    # Update position of rectangle
                # Update screen.
# Run the game.
